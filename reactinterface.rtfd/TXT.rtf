{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 HelveticaNeue-Light;\f1\fnil\fcharset0 HelveticaNeue-Bold;}
{\colortbl;\red255\green255\blue255;\red38\green38\blue38;\red255\green255\blue255;\red251\green255\blue202;
\red0\green0\blue0;\red242\green250\blue160;\red251\green255\blue202;\red242\green250\blue160;\red255\green255\blue255;
}
{\*\expandedcolortbl;;\cssrgb\c20000\c20000\c20000;\cssrgb\c100000\c100000\c100000;\cssrgb\c98824\c100000\c83137;
\cssrgb\c0\c0\c0;\cssrgb\c95686\c97647\c68627;\cssrgb\c98824\c100000\c83137;\cssrgb\c95686\c97647\c68627;\csgray\c100000;
}
\margl1440\margr1440\vieww10800\viewh12980\viewkind0
\deftab720
\pard\pardeftab720\sa180\partightenfactor0

\f0\fs32 \cf2 \cb3 \expnd0\expndtw0\kerning0
- [Instructor] Let's take a look\'a0at what we get when we create a project\'a0with Create React App.\'a0I have a folder right here\'a0with all the files that were installed.\'a0I'm going to pull this up in a text editor.\'a0I'm using Visual Studio Code for this course\'a0and you'll see that you get a number of files.\'a0Depending on what you did to get this folder,\'a0you're going to see a node_modules folder or not.\'a0If you downloaded the zip files from the GitHub repo,\'a0you won't see this folder\'a0until you do an npm install,\'a0so make sure you check out the Using the Exercises\'a0for This Course video.\
Now you also will see a public folder.\'a0This is essentially just your index.html file\'a0which is a little bit different than most HTML files\'a0that you may have seen.\'a0Notice that there are no linked tags\'a0for CSS or any JavaScript files\'a0that you would normally see being injected in here\'a0into the code.\'a0And that's because Webpack is going to automatically inject\'a0those for you but this is the HTML sort of page\'a0that you can use if you want to customize things\'a0a little bit, so you can, for example,\'a0change the title of the page\'a0or maybe add some basic code for the entire document.\
In addition to that, you get a manifest.json file\'a0which is useful for mobile devices\'a0when you save the application\'a0from your mobile browser as an application.\'a0\cb4 There's also a favicon.ico file.\cb3 \'a0This is just a little logo that will appear\'a0in your browser bar.\'a0This public folder is probably something\'a0you're not going to mess with too much.\
\
\'a0
\f1\b The folder where you're going to do most of your work\'a0is this source folder.
\f0\b0 \'a0We're going to go over how these files build your application\'a0in the next video but just know\'a0that the main files here are this
\f1\b  index.js\'a0which is sort of your bootstrapper,\'a0it's the first thing that is going to load\'a0and it's essentially going to load your first piece\'a0of your application and everything else\'a0is going to be loaded from here\'a0and as you can see, you're loading a CSS file\'a0and you're actually loading this other component\'a0called App and there's not that many files in there\'a0and then there's like a logo here\'a0as well as a serviceWorker.\

\f0\b0 \

\f1\b That serviceWorker is just a sort of default installation\'a0that allows your application to work a little bit better\'a0on mobile devices when they are offline.\

\f0\b0 \'a0You don't need to worry about this file too much.\'a0In addition to that, you will see a package.json file.\'a0This is very typical with Node.js type projects\'a0and you can see the name of our application right here\'a0as well as a version number\'a0and a set of dependencies,\'a0so these are essentially the plugins that React\'a0is going to use to do its work.\
Now, where are these plugins?\'a0These plugins are actually in the node_modules folder.\'a0So, if you look in here,\'a0you'll notice that if you scroll down quite a bit\'a0until you get to the Rs,\'a0you're going to see a folder for React\'a0and that's what this is referring to\'a0as well as the other files here, react-dom is right here,\'a0react-icons and react-scripts.\'a0I mentioned that React uses something\'a0called Webpack and Babel.\'a0Now normally you would see those in here perhaps\'a0in some other applications as dependencies\'a0but React does something pretty interesting\'a0in that it builds everything in a folder\'a0called react-scripts.\
The react-scripts folder has the dependencies\'a0for all the other extensions that you're seeing\'a0in this node_modules folder,\'a0so it's cool because it hides sort of the things\'a0that you don't need to see\'a0but it means that some things are not quite as apparent,\'a0so you can't really see the Webpack configuration\'a0although there are ways of customizing that if you need to\'a0and some of that is just all hidden\'a0within that react-scripts folder.\'a0In addition to that, there are some scripts\'a0that you can run from the terminal.\
We saw them before when we installed the application\'a0and when you issue the npm start command, for example,\'a0it runs the script called start and react-scripts\'a0and so on and so forth for the other one.\'a0And in addition to that,\'a0you can see that there is some configuration here\'a0for some of the packages\'a0and you can add more configuration here if you need is.\'a0So, this for example, configures how browsers\'a0can preview your files\'a0and what versions you are supporting in those browsers.\
There are some other configuration files,\'a0package-lock.json is a more explicit listing\'a0of all of the different things\'a0that are actually getting loaded.\'a0As I mentioned, must of them will be hidden\'a0in package.json, so this is actually does tell you\'a0every single folder that's in the mode_modules folder.\'a0There's also a gitignore file\'a0which you shouldn't mess with\'a0that essentially lets you hide files\'a0from being uploaded into GitHub.\'a0That's why the node_modules file\'a0which is listed right here\'a0doesn't actually get uploaded\'a0and any other files that you would see here,\'a0like for example, the Mac uses this DS_Store file,\'a0those files are not going to be uploaded to Git and GitHub\'a0and also not pushed into any server\'a0that you would push the application into.\

\f1\b So, as I mentioned, in the source folder,\'a0the most important thing is this loader called index.js\'a0\cf5 \cb6 and we'll cover how the application actually works\cf2 \cb3 \'a0and git-build in the next video.\
\
2. Exploring a basic react app\
\

\f0\b0 - [Instructor] So let's take a look at this source folder\'a0in more details and find out how the application\'a0is actually getting created and then loaded up\'a0into a browser.\'a0Now I am going to need to start my application\'a0if it's not already going.\'a0We can do that on a separate terminal,\'a0but in Visual Studio code for the Mac,\'a0I can issue this terminal command right from here\'a0by going to the Terminal,\'a0and then choosing New Terminal here.\'a0\cb4 And then I can run the npn start command.\cb3 \
Now this will pull up a browser,\'a0and once you do that, you'll see the application run.\'a0I'm going to make this window a little bit smaller.\'a0So what you're seeing right here\'a0is the index of that HTML file\'a0that I showed you earlier which is in the Public folder.\'a0So that index.html file for example,\'a0has a name of React App,\'a0and the way that the automation runs,\'a0if you edit that file, you'll see it\'a0automatically update as soon as we save it.\'a0Now once you get the terminal going,\'a0you don't really need it to be showing,\'a0so we can hide that if we need to.\
And in here you'll notice that you'll see\'a0sort of typical HTML here like this link to the favicon\'a0as well as some metatags,\'a0and then the actual most important piece\'a0in this whole HTML page is this right here.\'a0This is a div that has an id of root,\'a0and this is where your application is going to run.\'a0If you were adding any additional HTML for your page,\'a0you would put that around,\'a0anywhere around in this area,\'a0while still sort of creating this div with an id of root.\

\f1\b It's really the thing that loads the application.\'a0So that is being loaded from this index\'a0that JS file, and if you look at what it's doing,\'a0it's importing a class from a library.
\f0\b0 \'a0\
\
Now when you import things in React,\'a0use the Import command,\'a0and then you can import, and if the visual library\'a0or something from an individual library,\'a0and we'll be working in both ways later on,\'a0and
\f1\b  when you see a name like this,\'a0just a name in quotes,\'a0it means that it's literally loading something\'a0from the node modules folders.\

\f0\b0 So again if you open that up and we sort of\'a0scroll all the way down to the Rs,\'a0you would see that there is a React folder,\'a0and that it's loading up something called ReactDOM,\'a0which manages the document object model,\'a0which is how web pages are built,\'a0so that's from a different folder,\'a0and it's loading up this class right here.\'a0\

\f1\b Now you also see that it's loading\'a0something called index.css.\'a0This is a literal file because you can see\'a0that it starts with a period and a slash,\'a0so if we, let's close this open editors\'a0little window here, and\'a0we'll close up node modules.
\f0\b0 \
Let's go ahead and close this Public folder,\'a0because right now we're looking at\'a0this index.js file right here.\'a0So this is actually loading another file\'a0called index.css in the same folder,\'a0which is right here and you can see that it's\'a0just sort of making the page look nice,\'a0and then in this index.js file,\'a0we're loading something from another file.\'a0Now we're loading a class called App from a file,\'a0and you'll notice that it doesn't have the extension\'a0because it doesn't need to be there.\'a0It assumes that it's a JS extension,\'a0so it's loading this file and a class\'a0that is created on that file.\
In addition to that, it imports the service worker file,\'a0again you don't need to have this,\'a0but you could just leave it, it's not going to hurt anything.\'a0It's probably going to help.\'a0
\f1\b And then what it does, is it uses the ReactDOM class\'a0to render the application,\'a0and the application it's going to render is\'a0something that looks like an HTML tag,\'a0but it's sort of custom.\
\

\f0\b0 \'a0So this is coming from this app right here.\'a0When a component is created in React,\'a0it let's you call it like an HTML tag,\'a0and they're always going to match in name,\'a0so this app right here refers to this,\'a0and then when you load this and you render the page,\'a0you're going to target an element in your HTML page,\'a0and we created an element with an id of root,\'a0so we're loading it by using this document\'a0getElementById of root,\'a0so that loads everything up,\'a0and remember in the index.html file\'a0we saw that div with an id,\'a0so now if we look at the App.Js folder,
\f1\b \'a0you'll see that it does similar things,\'a0so here is a place where it's loading the react library,\'a0and then something called Component.\
So this is one of the other classes that React\'a0lets you use and it's pretty much\'a0the most common class that you'll be using\'a0and it's just a feature within the library\'a0that is the React library.\'a0
\f0\b0 And in addition to that, we can also,\'a0this is interesting, we're loading a logo,\'a0and we're putting it into a variable,\'a0so this import is a little bit different,\'a0so this is loading up this logo.svg file\'a0and putting it into a variable.\
\
\'a0
\f1\b And then also loading up app specific CSS,\'a0so in this line, the interesting thing about React\'a0is that the CSS for subcomponents only gets loaded\'a0if the application has that component showing,
\f0\b0 \'a0which is cool because in a lot of web pages\'a0you'll have pieces of forms and everything\'a0might be dynamic and showing up\'a0and getting created and deleted,\'a0and this means that when we use a component in React,\'a0the CSS can only be loaded if a component is showing.\
Right? So that's cool.\'a0So now, we can also start out by creating\'a0our custom class here called App,\'a0and that App is based on component,\'a0but it extends it, it adds some additional information.\'a0And then everything that happens in React\'a0happens in this render method or command,\'a0and the render command allows you to\'a0return what the application's actually going to look like.\'a0So this actually where this logo and this text\'a0is all coming from, notice that this logo's rotating here,\'a0
\f1\b and you can see that it looks like HTML,\'a0but don't be fooled,\'a0it's actually a language called JSX\'a0which is a combination of HTML and actually XHTML\'a0if you're going to be precise,\'a0and also JavaScript.\

\f0\b0 So notice that for example instead of using\'a0the keyword class, which you would use in normal HTML,\'a0you have to use something called className,\'a0and that's because class means something in JavaScript,\'a0and in this language anything that is a keyword\'a0in JavaScript, is something that you don't end up using,\'a0so you just have to get used to\'a0that some things that you're used to calling,\'a0like for example in forms\'a0if you want to use the keyword four in a label,\'a0you can't use four because that obviously has a meaning\'a0of a looping sort of keyword in JavaScript,\'a0so you have to use something called HTML4.\
So that's one of the things that\'a0always gets people in React.\'a0
\f1\b Notice how we're actually using the logo that we imported,\'a0so here we imported this svg into this variable,\'a0and then we can just use it using an expression.
\f0\b0 \'a0So whenever you see these curly braces,\'a0that's known as an expression,\'a0and an expression just means almost like a formula,\'a0and in that formula you can put in normal,\'a0quasi-normal JavaScript,\'a0and what we're doing here is just saying\'a0output the logo here,\'a0and then we give it a class name\'a0and everything else looks normal.\
The only other thing that you have to watch out for\'a0is that in React, you have this return statement\'a0and this returns essentially your HTML.\'a0
\f1\b The key thing to remember here is that\'a0you can only return a single HTML element,\'a0so if you try to add another div here,\'a0it will not work, it will crash actually the application,\'a0so it's going to give you an error,\'a0and that's because you can't return two elements,\'a0you have to return a single element.
\f0\b0 \'a0So you just end up wrapping everything around\'a0a single container element.\
You could put another div in here,\'a0and wouldn't complain about it at all,\'a0it would just, the editor's actually rewriting that as div.\'a0And that's another thing in Jsx,\'a0if you have a single element like this image element,\'a0it gets a slash, which if you've ever used XHTML,\'a0that's how that works.\'a0So hopefully that gives you an idea\'a0of how the application works.\'a0The last thing you have to do is export the component\'a0\cf5 \cb6 because if you remember, we're importing this component\cf2 \cb3 \'a0into index.js, and that is how that information\'a0gets fed and how the tab with an id of root gets replaced.\
\

\f1\b 3. Adding your own modules
\f0\b0 \
- [Instructor] The default installation would be fine\'a0if I just wanted to show you how to use React itself.\'a0But in a realistic project,\'a0you're going to want to often install\'a0additional libraries or frameworks,\'a0so I'm going to show you how to do that in this video.\'a0Now essentially we're going to need to pull up a terminal\'a0and then issue an npm install command,\'a0and then bring in the frameworks and utilities\'a0that we need to make things work.\'a0So I'm going to pull up the terminal.\'a0Again, it's right here under Terminal menu\'a0and you can choose New Terminal.\
You can also use the Command key,\'a0so I'm going to do that to pull up the terminal.\'a0Again, if you're at a PC,\'a0you may want to use git bash in a separate terminal,\'a0and you can leave the original application running.\'a0So I actually have two terminals open\'a0and I can go to this and you can see that\'a0my application is running on this terminal,\'a0and then on the other one,\'a0it's just an empty terminal right here.\'a0So I'm going to need to do an npm install\'a0and you can type in npm install,\'a0or use the shortcut npm i,\'a0and then you can use --save,\'a0and that would save the installations\'a0as a dependency of the project.\
So that would actually put them in this package.json file.\'a0So they'll appear here under the dependency section\'a0as we install them.\'a0Now you can also use a shortcut as -s,\'a0and then you can type in the libraries\'a0that you want to bring in.\'a0So we're going to bring in a bunch of them.\'a0We're going to bring in bootstrap,\'a0also something called react-icons.\'a0We're going to bring in lodash,\'a0and I'll be covering this in just a minute\'a0while they're installing,\'a0so for right now let's just issue the command, so lodash.\
And bootstrap requires that you also install jquery\'a0as well as something called popper.js.\'a0And we're also going to install moment\'a0and also something called react-moment.\'a0Now that's quite a lot of stuff,\'a0so let's go ahead and get it started,\'a0and it's going to sit there\'a0and do a lot of installations in the background.\'a0In the meantime, I'm going to go over\'a0each one of those installation.\'a0So Bootstrap is a responsive, mobile-first framework\'a0that you can use to just make it easier\'a0to lay out your projects.\
I'm going to be using\'a0a lot of Bootstrap code in this course.\'a0And we've got courses on Bootstrap that you can check out\'a0if you want to see what everything means in the HTML.\'a0I'm not going to cover that,\'a0but you can take that course.\'a0And I'm using the regular version of Bootstrap.\'a0There are versions that are a little bit more Reactified,\'a0but I just want to focus\'a0on the React piece of how things work.\'a0So I want to show you how to install\'a0just a regular version of Bootstrap\'a0and you're going to see how I also use\'a0componetized version of libraries as well\'a0as we go through some of the different installations.\
And that's just realistic.\'a0Sometimes, you know, not everything is going to require you\'a0to have sort of componetized versions\'a0of modules and extensions,\'a0and so I'm going to show you both things.\'a0So in addition to that, as I mentioned,\'a0Bootstrap requires that you use jQuery.\'a0You can find out more about jQuery at this URL.\'a0And in addition to that,\'a0it also requires something called popper.js,\'a0which you can find out about more at this URL.\'a0And we're installing the Lodash library,\'a0which has a lot of utilities for managing arrays.\
We could create our own methods\'a0and functions for handling arrays,\'a0but this library does a fantastic job.\'a0I use it in a lot of projects.\'a0It works really well with React\'a0and you can import just the component that you need\'a0instead of importing the whole library.\'a0And again I think this is realistic to the way\'a0that you would work if you were building a project.\'a0Also, I'm going to use Moment.js,\'a0which is a library that allows you\'a0to manipulate dates and times in JavaScript.\
With that, I'll be installing\'a0something else called react-moment,\'a0which is a componetized version of the moment library\'a0because it happens to be a very large library\'a0and you only need a little piece\'a0that allows you to format dates.\'a0So react-moment needs moment,\'a0it's just a small version\'a0that let's you install the piece that you need.\'a0In addition to that,\'a0we're going to use this thing called React Icons,\'a0which is a library that allows you\'a0to import a number of different icon libraries.\
So you can see that they're all right here.\'a0Font Awesome, Ionicons, Material Design Icons,\'a0et cetera, et cetera.\'a0I'm mostly going to be using the Font Awesome Icons.\'a0And this is also a very sort of componetized library,\'a0which means that you're just going to install\'a0the little piece of whatever you need.\'a0In this case, we're going to use a couple of small icons\'a0that you're going to see as we build the application.\'a0So let's check this out.\'a0And it looks like everything is done.\
If you want to, you can issue a clear command.\'a0So once you've installed all of these things,\'a0they will appear here as a series of dependencies.\'a0You can see bootstrap, jquery,\'a0and the other things in here.\'a0Now these are added into the node_modules folder.\'a0Now if you don't see them,\'a0make sure you hit this icon in Visual Studio Code.\'a0Sometimes the refresh doesn't happen right away.\'a0And what we also need to do\'a0is actually bring them into the different components\'a0or the different files that we want to import them into.\
So in the case of bootstrap\'a0and some of these other main libraries,\'a0you're going to want to import them in the main component.\'a0And because this is going to apply\'a0to essentially the whole page,\'a0so in here, before we import our CSS,\'a0I'm going to go ahead and import,\'a0and from the bootstrap folder in our node_modules folder,\'a0and you don't have to put node_modules here, which is cool,\'a0you want to look for the distribution folder\'a0and then look for bootstrap.css,\'a0and you can leave this index.css alone for right now.\

\f1\b And then over here,\'a0I'm going to import some of the other files.\'a0So in the order that they are required for working,\'a0just like what you would do with a bootstrap installation,\'a0you want to bring up jquery first,\'a0and this is going to be the JavaScript.\'a0
\f0\b0 So again this refers to the jquery folder in node_modules.\'a0So if we bring this back up here,\'a0you can see the bootstrap folder,\'a0and in here there's a distribution folder.\'a0And you can see that there's a css folder\'a0and a javascript folder.\
The same thing for the other ones that we're bringing.\'a0And we're going to bring in jquery\'a0so there's a jquery folder.\'a0And we're just given instructions\'a0for getting to the folder and the locations in the folders.\'a0So jquery, distribution, jquery.js,\'a0and then we're going to import the popper library,\'a0\cb4 and popper actually has the .js name on it,\cb3 \'a0distribution folder.\'a0And this one is a little bit different,\'a0we want to import the umd subfolder.\
And that's because popper is something\'a0that can be broken down into components as well,\'a0so we'll need the componetized version of it.\'a0And so it's just popper.js,\'a0and finally I want to put semicolons in here.\'a0Import the bootstrap javascript,\'a0so bootstrap, distribution, js,\'a0and bootstrap.javascript here,\'a0and save that with a semicolon.\'a0Save this.\
So looks like I made a mistake\'a0here in the bootstrap.css file.\'a0This is how React gives you errors.\'a0It's really nice,\'a0it just brings 'em up in the browser, which is cool,\'a0and you'll see different ways\'a0of getting to errors in the future.\'a0But I forgot actually to put in the css subfolder here,\'a0so let's go ahead and save that.\'a0And you may notice that now\'a0we get a slightly different color.\'a0This is the only way we can tell right now\'a0that it's loading properly.\'a0There's a slightly different color here to this section,\'a0but now I know that all of my libraries have been imported.\
And this is how you do different modules\'a0and different frameworks.\'a0You just kind of import the pieces that you need.\'a0You'll see in the future\'a0that when we need things that are more componetized\'a0like the icons and the moment.js library\'a0\cf5 \cb6 that we're just going to bring in the pieces that we need\cf2 \cb3 \'a0into the components that we need.\'a0But these are the global imports that we need to do\'a0in order for my project to work.\
\

\f1\b 5. Organizing Projects\
6. Creating subcomponents\
7. State and expression basics\
\pard\pardeftab720\sa180\partightenfactor0

\f0\b0 \cf2 \outl0\strokewidth0 - [Ray] There's a couple of key concepts\'a0that make React a great place to develop applications,\'a0and one of those concepts is state.\
\
\'a0
\f1\b State is what's going on with your application,\'a0so it refers to essentially an object that has some data\'a0that defines what your application is doing,\'a0and that correlates to the virtual DOM,\'a0which is another feature in React\'a0that will automatically modify your components\'a0when that data, or that state, changes.
\f0\b0 \
So let's take a look at how that works.\'a0Now I've got this class here that I've created,\'a0and in order to initialize state,\'a0we need to go ahead and use the constructor method here.\'a0\cb7 So this is common to object\cb3 \'a0or enter applications with classes.\'a0The constructor is where you initialize things,\'a0and when you use a constructor\'a0and you want to use the this keyword\'a0to access things inside the component,\'a0you need to use this super method.\'a0So super allows you to get information\'a0from the parent component, and it's also\'a0where you can pass things from other components\'a0to this component, and it allows you to use\'a0the this keyword.\
So next we can modify this special variable called state\'a0by using this and then calling state\'a0and then initializing an object that defines\'a0what kind of information our application has.\'a0So in here I'll just create right now\'a0a variable called myName, and I'll assign it\'a0a value of Ray, 'cause that's my name.\'a0And so now this becomes an element\'a0that's available inside my components.\'a0So over here I can use an expression,\'a0and in JSX to use an expression uses curly braces.\
You've seen them before, we had them\'a0when we installed Create React App,\'a0we had this like logo that was assigned to a variable,\'a0and we used it inside an expression.\'a0So what we can do here is refer to that object,\'a0this.state, and then we created this variable\'a0called myName in there, and if we save that\'a0you'll see that now it will display my name.\'a0Now the cool thing about React is that\'a0if anything in the application modifies this variable,\'a0React will automatically redraw any part of the application\'a0that it needs to that uses that variable.\
And this is super cool, so the only way that I can\'a0show you this is by looking at the React developer tools,\'a0which you should have installed if you went through\'a0the installation process, and you should see this icon\'a0in your extensions in Google Chrome.\'a0To access that, I'm going to right click and select inspect.\'a0And we'll get the normal inspect sort of tab here.\'a0Let's see if I can put that at the bottom,\'a0so I'm going to click right here and put it at the bottom\'a0to get a little bit more room.\'a0So here is the default sort of developer tools,\'a0and if this was wide enough, you would see that\'a0the last one is this React tab.\
So if we click on that, you'll be able to see that\'a0the application right now, if we open this up,\'a0you'll notice that it has these different components\'a0over here, the components that we created.\'a0
\f1\b But because we've created this state in the main part\'a0of the application, on the right hand side,\'a0you can see that we have this state right here.\'a0There's also something called props,\'a0which we'll cover later.\'a0And you can see that the state\'a0of the current component has this thing called myName.\

\f0\b0 So let's go ahead and modify this to something else.\'a0So I'll use my middle name, which happens to be Herman.\'a0And as soon as I modify that here,\'a0you'll notice that my application was automatically redrawn.\'a0And that's really, really powerful.\'a0It doesn't seem that way, but what's happening here\'a0is that because I've modified the value of this variable,\'a0React automatically noticed that I did that,\'a0and decided to redraw this component,\'a0because this component was using this variable\'a0automatically for us.\
And the reason 
\f1\b that's powerful is because\'a0it allows you to build things like a component\'a0that displays a list of pieces of data,\'a0and if something like, for example, adding\'a0a piece of data changes that list,\'a0you don't have to tell this component to redraw itself.
\f0\b0 \'a0It'll automatically notice that\'a0you have added an element to that list,\'a0and will automatically redraw.\'a0And we'll see how that works in React.\'a0It's one of the most important features\'a0in React, and I just wanted to give you\'a0a quick introduction to how that works.\
\

\f1\b 8. Using fetch in a lifecycle method\

\f0\b0 - [Instructor] In a real application, you would be\'a0using data from some other source.\'a0\cb7 To do that in Javascript, you would normally use\cb3 \'a0something like Ajax, and if you're using more modern\'a0Javascript, you would use the Fetch API.\'a0You can use the same type of things in the React\'a0application, but they have to be treated\'a0a little bit differently, and that brings me to\'a0the concept of lifecycle in React.\'a0
\f1\b Lifecycles are a function in Javascript that allow you to do\'a0things at certain point in your application's life.\'a0So as the component is created for example,\'a0you could do something before the\'a0component displays you could do something else,\'a0and so we need to use those to bring data.
\f0\b0 \
Let's start by getting some sample data\'a0that I've created for you at this URL.\'a0So I'm going to click on this raw button here\'a0and select all this and go back into my application\'a0and
\f1\b  I'm going to need to put this in the public folder\'a0because this is going to be data that needs to be\'a0available to the application once it's processed.\'a0This source folder has a bunch of files that are\'a0all going to be converted into regular Javascript
\f0\b0 \'a0eventually when we use the build command, or even when we\'a0do the npm run start that is controlling this application.\

\f1\b Files that you actually need in the server go in this\'a0public folder
\f0\b0 , so we'll create a new file here,\'a0call it data.json, and we'll paste all that information.\'a0So you can see this is an array of appointments\'a0for the pets, and each array element right here is an object\'a0and it has different fields for the different types of data.\'a0
\f1\b So save that, and we'll bring that into\'a0app JS using a lifecycle method.\'a0As I mentioned there are a few one them.
\f0\b0 \
The one that you need to use is called 
\f1\b componentDidMount.\'a0And this is where we would bring in things like\'a0information from an external source, so you can\'a0issue here a get request to a server, or API,\'a0or anything that you use normally to bring in data
\f0\b0 .\'a0Here we're just going to look for something in a file.\'a0And the React lifecycle method is called componentDidMount.\'a0And you can actually see some of the lifecycle methods\'a0in here, so componentDidMount, and notice that this\'a0is going in between the constructor and the render method.\
So in here, what we'll do is we'll use the fetch API.\'a0If you had something like jQuery you could use that\'a0and use jQUery's like get or post methods,\'a0but fetch is a pretty easy way of doing things.\'a0
\f1\b So we'll look for the file in the directory that is\'a0the current directory, now that's weird because\'a0we can see that the file isn't here, but as far as the\'a0Javascript is concerned, once our application all gets\'a0assembled, the data.json file will be in\'a0the same folder as the current document.\

\f0\b0 So we'll say ./data.json and the fetch API works\'a0with promises, so we can use the Javascript then method\'a0to get the value of the response that you get from\'a0the server, in this case it's going to be the file.\'a0And, you can also then specify that that response\'a0is going to come in as a json formatted object.\
So, once you do that, you can once again use the\'a0then promise method and then take that result\'a0and go ahead and covert it into something else.\'a0So what I'm going to do here is take the result that I get\'a0from receiving.json file, and process it by creating\'a0a variable here, I'm going to call this appointments.\'a0And I'm going to get the result and use the Javascript\'a0map function here to go through each of the elements\'a0in the file and return them, just unprocessed.\
I could process them and add something else to each\'a0element, but all I'm doing in essentially all the results\'a0into this appointments variable that we're creating here.\'a0Now the reason for that is, you don't want to modify\'a0the state directly by doing something like this.\'a0You want to create a variable, do things to it,\'a0and then once that variable is ready, you want to push that\'a0into the state by using a method called set state.\'a0This is another one of the features of React,\'a0you never modify state directly, so you may be tempted\'a0to do something like this.state and then myAppointments\'a0equals whatever, or try to map things directly\'a0into a variable, but you can't do that.\
Or, at least you shouldn't do that.\'a0You should sort of create a temporary variable and then\'a0push it into state by using a special method called\'a0setState, and if you don't do this you will get a warning.\'a0So let's try setState, and in setState we're going to\'a0push something into a variable that we'll create\'a0called myAppointments, and we'll push that\'a0temporary variable that we created.\
So, this needs a semicolon here, and this actually\'a0needs to go in here, so it actually should be\'a0within this result that we're getting.\'a0So we'll set the state there, and we are pushing something\'a0into a variable that doesn't exist quite yet,\'a0so this should be added to here, and we'll initialize\'a0it as an empty array, our data is an array of objects,\'a0so we'll just initialize it as an empty array.\
And then we'll push it into the state using this .setState.\'a0So let's go ahead and save that.\'a0And if we didn't make any errors, we should be able to\'a0inspect, and again go to the React tab, and now you can see\'a0that the appointments are right there.\'a0Now if we open this up, we'll see that they were read\'a0from the file, and they were placed into our state,\'a0just like our name was.\
Now we're to going to need name anymore,\'a0so let's go ahead and get rid of it.\'a0And we'll get rid of the call right here.\'a0\cf5 \cb8 \strokec5 Now I can't push an array directly into this template.\cf2 \cb3 \strokec2 \'a0I have to do something to it, and we'll\'a0talk about those in the next video.\
\

\f1\b 9. Working with complex data\
\

\f0\b0 - [Instructor] Now interact to simple variables\'a0we can use the expression like this\'a0and then I showed you before that you can\'a0put in something like a variable that's in the state.\'a0\cb7 Right now we don't have one other than\cb3 \'a0the array of Appointments,\'a0but if you try to just put in\'a0the Appointments variable here,\'a0you'll notice that you'll get an error.\'a0And the error is that you can't use objects as React child.\
So we need to put this in a simple expression.\'a0You may try to do something like this,\'a0'cause you're like well that might my\'a0Appointments an array of objects\'a0and maybe we can get the first item\'a0and then just output the petName.\'a0That's also not going to work.\'a0Again, it wants simple expressions,\'a0so what we need to do is convert this\'a0so that it outputs a simple expression.\'a0And to do that I'm going to create a variable here\'a0and it's just a temporary variable.\
I'll call it ListItems\'a0and this is going to refer to,\'a0go ahead and make this bigger,\'a0this is going to refer to myAppointments\'a0and then we're going to use Javascript map method\'a0to go through all the elements\'a0and we'll take each of the items.\'a0And I'm using a parenthesis here,\'a0which looks sort of odd,\'a0but it's essentially what we do here\'a0with this return statement.\
We return some jsx,\'a0and so we're going to do something similar here.\'a0We'll create a div\'a0and then inside here we'll use that item variable\'a0to output the petName.\'a0So now that we've taken each of the petNames\'a0and created a list of them\'a0and placed them into this variable\'a0then we can use that in our expression.\'a0ListItems and we'll save that,\'a0and now you can see that we get the list of pets\'a0which is pretty cool.\
And you may be tempted to do something like this.\'a0Say that other variable is ownerName,\'a0but you'll get an error\'a0'cause remember as I mentioned before\'a0jsx wants you to have a simple container\'a0around everything that is a single tag.\'a0So here if we wanted to do something like this\'a0we'd have to put sort of another div\'a0and then put these things in there.\
And that would work.\'a0Doesn't look that great\'a0\cf5 \cb8 \strokec5 but this is how you create a simple expression\cf2 \cb3 \strokec2 \'a0that you can then output in your components.\'a0What we really need to be doing is all this\'a0but inside the list Appointments component.\'a0We'll take care of that in the next video.\
\

\f1\b 10. Using a render template expression\

\f0\b0 - [Instructor] Let's work on making this component\'a0a little bit more interesting.\'a0I'm going to go ahead and\'a0write all of this code that you see up here\'a0inside my template section, so in this return section.\'a0To do that, I'm going to need some HTML\'a0that I've created here for you.\'a0\cb7 This is just Bootstrap code.\cb3 \'a0I have already changed the keyword class\'a0that you would normally see in HTML,\'a0to class name as we need in react,\'a0but other than that, this is just normal HTML code.\
So click on the raw button.\'a0We'll copy this\'a0and then\'a0we're going to need to use parentheses here\'a0so I'm going to type some parentheses here, delete this,\'a0and then just paste my HTML in here.\'a0So you do need parentheses when you're using\'a0more than a single line.\'a0And let's go ahead and save this.\'a0Now you're just going to to see right now\'a0a single one because this actually doesn't have\'a0any of the looping mechanism\'a0to go through each of the elements.\
So this div right here is the main container and\'a0what I need to repeat is this next section right here.\'a0I'm going to do something similar to what you see up here,\'a0but it's just going to be in the template.\'a0So we'll create an expression and we'll save this\'a0dot props dot appointments.\'a0And then, just like before,\'a0we'll use the javascript map function\'a0to go through a series of items, so\'a0by mapping, we're taking the array\'a0and then taking each of the elements,\'a0putting them temporarily in this item variable,\'a0and then actually we need to do another set of parentheses\'a0'cause we're going to put the template that you see\'a0right inside this\'a0so all the way until this extra div down here\'a0and I'm going to cut that out\'a0and paste it in here.\
Right, so let's save that and let's take a peek.\'a0You can see that right now we just have a copy\'a0of the same element a bunch of times.\'a0So now we need to use expressions in here,\'a0so instead of pet name\'a0I need to call this item dot pet name\'a0and do the same for all the other ones.\'a0Let's go ahead and save that, take a peek.\
And you should see all the information now flowing properly\'a0which means that we don't need this temporary variable here.\'a0Sometimes it's more convenient to do things\'a0outside this return statement or outside the template\'a0and sometimes it's convenient to do it\'a0within the template itself.\'a0So we'll save that.\'a0And to make this look a little bit better,\'a0I have some extra CSS that I've prepared for you.\'a0So I'm going to click on this raw button right here,\'a0select all this\'a0and this particular CSS is going to apply\'a0to all of my components.\
So I'm going to replace what's in app dot CSS\'a0which was the old CSS from create react app\'a0and just paste this in there.\'a0And so that is going to make our application\'a0just look a little bit nicer.\'a0Some basic CSS to make things look good.\'a0So that's how you bring in some more complex HTML code\'a0and also how you modify the template by using an expression\'a0that's more complicated\'a0but allows you to sort of generate almost\'a0a template within a template.\
\

\f1\b 11. Injecting an index\
\

\f0\b0 - [Instructor] One thing that's interesting\'a0\cb7 about creating lists like this\cb3 \'a0is that React doesn't like them not to have an index\'a0or sort of an ID for each of the elements,\'a0so much so that you may have already noticed\'a0if you inspect this project,\'a0that there is an error all about it.\'a0So let's take a look at that.\'a0And it says each child in an array or iterator\'a0should have a unique key prop.\'a0So what that means is we need to create an index\'a0for each one of these elements.\
And we usually do that right here\'a0when we loop through the different events.\'a0So all you need to do is use the key keyword here\'a0and then pass along a unique ID.\'a0Now, our data doesn't have a unique ID in it.\'a0I mean, you could say maybe that the appointment date\'a0is sort of unique, but you could probably set up\'a0more than one appointment for a couple of pets\'a0if you have enough staff at the same time.\'a0Now, the names are also not going to be really unique\'a0because we could have two dogs named Pepe.\
So we really need to create our own index.\'a0Now, all you would need to do here\'a0is just put in the name of a unique ID,\'a0so we're going to create one and we'll call it appointment ID.\'a0And we'll have to feed it into our appointments\'a0before it gets to our subcomponent.\'a0So let's go ahead and go back into App.js.\'a0And when the component mounts,\'a0we are reading some JSON data.\'a0And then we are going through the data\'a0that we receive and mapping it over here.\
So right in here, what I'm going to do\'a0is add an appointment ID variable to my list.\'a0This is going to need an index\'a0that I'm going to increment every time\'a0I go through these items.\'a0So, I'm going to create a variable in the state\'a0that I'm going to call lastIndex.\'a0This is going to keep track of the index\'a0that I'm currently looping through.\'a0So that means that in state, I'm going to create\'a0something called lastIndex.\
And I'll initialize it with a value of zero.\'a0That will be my first element.\'a0So now, I can pass it right here.\'a0And now I need to modify this date.\'a0I can't do something like this,\'a0like you would do in normal JavaScript\'a0because we can't modify state directly.\'a0So what I can do is use the setState method.\'a0And I have to pass in an object with what I want\'a0to modify, which in this case would be lastIndex.\
And then I can do this.state.lastIndex plus one.\'a0So this, as it's looping through each of the elements,\'a0it's redefining the value of lastIndex.\'a0And let's go ahead and save this.\'a0Since we've created this as part of myAppointments,\'a0when we pass them into the subcomponent,\'a0it should understand them just fine.\'a0So let's go ahead and save this other ListAppointments here.\
And now, you should see that you don't receive the error.\'a0If you want to take a look at the indexes,\'a0you can actually print them out,\'a0at least temporarily, so that we can see them.\'a0We can add appointment ID here,\'a0and you can see them right here.\'a0So now, each one of these items has a unique ID.\'a0That's going to be really useful later on,\'a0so I'll point it out when we get to that part\'a0in the building of our application.\
\cb9 But for right now, let's get rid of it\'a0\cf5 \strokec5 so that we have a clean application.\
\
\pard\pardeftab720\sa180\partightenfactor0

\f1\b \cf5 12. Using third-party components\
\pard\pardeftab720\sa180\partightenfactor0

\f0\b0 \cf2 \cb3 \strokec2 - [Instructor] It's relatively easy to use\'a0a component like this ListAppointments,\'a0sub-component that we've created.\'a0And it's even easier to use components\'a0that were pre-built by somebody else.\'a0Case in point, we've already installed\'a0a couple of them into our application.\'a0And I went over it when we worked\'a0\cb7 with the installation of Create React App.\cb3 \'a0You could see that they're here\'a0as something called react-icons\'a0as well as something called react-moments,\'a0and also this moment library,\'a0and even this lodash library.\
So let's take a look\'a0at how you can incorporate one of those in here,\'a0and the one that we'll be working with first\'a0is called React Icons.\'a0This is a really great library\'a0that combines a number of different icon packages,\'a0like the Font Awesome icon package,\'a0and let's you use them in your React applications.\'a0So what that does is allow you to use and import command\'a0to import a specific icon from this library.\'a0And you can see the names right here\'a0for each of the icons that you can use.\
And if you want to use, say, Ionicons,\'a0you can click on that and take a look at how you import them\'a0as well as the names of the icons,\'a0and there are a lot of icons in this library.\'a0So to make that really easy to use,\'a0this company has wrapped those icons\'a0into a component package for you.\'a0Now as I mentioned, we already installed this,\'a0so all we need to use is the import statement,\'a0and we can just do that inside the component\'a0that we want to use them in.\
So I'm going to switch back to ListAppointments\'a0and I'm going to use the import statement from that library.\'a0Let's also import,\'a0and then in here instead of importing\'a0the component from React,\'a0we're going to import a specific icon,\'a0and the one that I want to use is called FaTimes,\'a0notice the capitalization is according\'a0to what's on the website,\'a0and then we'll say from, and then in quotes,\'a0react-icons/fa, so fa is the specific library,\'a0this refers to Font Awesome in this case.\
So once we import that specific component,\'a0then all you need to do is use it in your application.\'a0So instead of this X right here,\'a0I'm going to use an icon.\'a0And you use it just like you did ListAppointments\'a0in the main app component.\'a0All you have to do is type in the tag name,\'a0which would be FaTimes in this case,\'a0and then close it like this,\'a0so this would be matching the name\'a0that we're importing right here.\'a0And once we do that, let's go and save that,\'a0and we should see sort of a fancier-looking X.\
It's not really all that different\'a0than the X in the font,\'a0but you can use something fancier if you want to.\'a0So that's actually pretty easy\'a0and a lot of these libraries will have additional options.\'a0One other library that I find pretty useful\'a0is a library called Moment.js.\'a0It's really useful for managing how dates work,\'a0and this one has a lot of different options.\'a0It's also quite big for the specifics of what you need,\'a0so it's importing a lot of things about dates and times,\'a0so you don't need the whole thing.\
And so there is the componetized version\'a0of this library called react-moment.\'a0So it's just a slightly different version of the framework\'a0that is a little bit simpler\'a0because it let's you import\'a0just what you need in your applications.\'a0So let's see how we can use that in our application.\'a0So right now you could see that my times are in a format\'a0that uses military time.\'a0And I find that confusing sometimes,\'a0but if you look at data.json,\'a0that's just how the dates were created.\
And this refers to the way\'a0that maybe a form will be creating this date.\'a0So we're going to go back into ListAppointments\'a0and we're going to import react-moment,\'a0we already installed it before,\'a0so we'll just actually import\'a0the Moment library from react-moment.\'a0And this needs to be in quotes here,\'a0then we'll put in a semicolon,\'a0and then we can use that library\'a0instead of doing the date like this.\
Let's go ahead and take this out,\'a0and I'll put in a return right here.\'a0And so just like using the icons,\'a0what you do is you type in the name of the tag\'a0that relates to the library.\'a0So we'll say Moment,\'a0and as I mentioned, this one actually requires you\'a0to pass along some props into the library,\'a0just like you did with ListAppointments.\'a0What we're going to need to pass\'a0is the actual date that we're using,\'a0so I'll just actually paste, I still have that item,\'a0that appointmentDate in my clipboard,\'a0and then I need to send two additional things.\
And first off is the format that the date is in,\'a0so that will be in a prop called parse.\'a0And in here I'm just going to pass it along a string\'a0and this will be the year with four characters,\'a0the month, the date,\'a0and you can take a look at the Moment documentation\'a0to see what these should be,\'a0but this is actually the format of the date\'a0in my data.json file.\
If it doesn't know what this format is,\'a0it will probably maybe work but not in all browsers,\'a0so it prefers that you give it how-to interpret\'a0or parse the date that it gets from the data.\'a0And then you can specify a format.\'a0And for this prop, we're going to pass along\'a0just a different-looking format.\'a0So the month in three letters, then dash,\'a0the day, just with one letter,\'a0and the hour as well as the minutes,\'a0and then a for am or pm.\
\pard\pardeftab720\sa180\partightenfactor0
\cf5 \cb8 \strokec5 So save that.\cf2 \cb3 \strokec2 \'a0And now you can see that my date\'a0is reformatted with the month,\'a0again, in the format that I've specified here.\'a0The Moment library is pretty configurable,\'a0and so you can take a look at the documentation\'a0if you want to modify any of these things.\
\
\pard\pardeftab720\sa180\partightenfactor0

\f1\b \cf2 13. Handling events through props
\f0\b0 \
\
- [Narrator] Props allow us to pass something down\'a0\cb7 from our main component into our sub-component.\cb3 \'a0So we're passing along the list of appointments here,\'a0and we're doing it through this prop\'a0that we called appointments.\'a0We send it to this list of appointments here.\'a0And then we do something with it.\'a0Now you can pass something back to the original appointments\'a0in order to process something like an event.\'a0So what we want to do here is when we click on these Xs,\'a0we want to pass along the record to the parent app function,\'a0and then modify the data.\
That will actually cause a re-render of this list\'a0automatically, and it will update our list for us.\'a0So to do that, we're going to need\'a0to add something here on this button.\'a0And it's going to be an on click event.\'a0This is similar to the JavaScript on click event.\'a0Ans we'll use an arrow function here.\'a0Arrow functions are really convenient\'a0because they allow you to use the keyword this,\'a0without modifying what it means.\
And if you just created a normal function,\'a0that wouldn't be the case.\'a0And so we can say, this, props, and then delete appointment.\'a0And we'll pass it along the item.\'a0So delete appointment is something\'a0that we're going to create as a prop on app.js.\'a0And item is of course the individual item\'a0that as we go through the different appointments\'a0we're temporarily generating\'a0in this other arrow function here.\
You can also include an event variable if you want here.\'a0We don't need to do anything with this event.\'a0It's just a click.\'a0So we don't need to pass\'a0like the value of the input field or anything.\'a0So you don't actually need it.\'a0And that's why I didn't put it there.\'a0So once we have that, let's go ahead and save this.\'a0You may see an error here.\'a0Oh, it didn't really bother it so much.\'a0It doesn't care that this doesn't quite exist yet.\'a0So we'll go back into app.js\'a0and then we'll create the prop\'a0that we're using in list appointments.\'a0So this will be delete appointment.\
And it's going to be equal to something that we'll create\'a0in this app.js, called delete appointment.\'a0So just like before,\'a0this is the name of it in this component,\'a0or it's sort of the target.\'a0And this is actually the name\'a0of the event that is being sent.\'a0So when we call this event,\'a0we don't actually need to specify\'a0that we're receiving any parameters.\'a0We'll just catch them in the event that we create.\'a0Now we'll need to create delete appointment.\
So this will be like this.\'a0And we're going to receive an appointment,\'a0just a single appointment record.\'a0Now because I can't modify state directly,\'a0I can't just take the my appointments variable\'a0and change it so that it doesn't have\'a0the record that we want,\'a0we're going to need to create a temporary variable here.\'a0So we'll say, let temp appointment,\'a0I'll call it appointments.\'a0And then we'll say, this.state.my appointments.\
And I'm going to use a library called lodash,\'a0which has a fantastic method called without\'a0that allows me to take an array,\'a0and then feed it a record that I want to delete.\'a0And it will return the record without this appointment.\'a0And that's because honestly,\'a0creating a method that deletes matching records\'a0from a list of array objects, is a little bit difficult.\
And I love lodash.\'a0So we'll need to import it up here.\'a0And we can just import the part that we need.\'a0We can say, import without from lodash.\'a0So now we are able to use this method right here.\'a0Now once we do that, then we'll have an array\'a0without the record that we're deleting.\'a0So we'll have to go ahead and set state.\
We'll now set my appointments to temp appointments,\'a0which is great.\'a0So this is almost going to work.\'a0Let's go ahead and save it so you can see\'a0that there's going to be a problem\'a0when we try to delete something.\'a0And this is sort of a weird error.\'a0You'll see this error probably a lot\'a0when you work with react.\'a0It's saying that it can't read the property,\'a0my appointments of undefined.\'a0So this something that happens\'a0because of what we're doing with the keyword this,\'a0inside this method right here.\
So in this function the keyword this\'a0doesn't refer to the object that we're creating over here.\'a0It refers to something inside this method.\'a0And that's a tricky thing about the keyword this.\'a0So we'll need to pass the version of the this variable\'a0that has this entire component in it,\'a0which will have access to all of our other methods\'a0and our data and state.\'a0So the way you do that is in the constructor,\'a0after you set the state,\'a0you can create something like this.\
This delete appointment is going to be\'a0equal to this delete appointment.\'a0We're going to bind the current value of the keyword this,\'a0which then sends the entire current object,\'a0which means that when we are referring to it in this line.\'a0And I know whenever I explain\'a0something about the keyword this,\'a0I have to really watch what I say, because it's confusing.\'a0So now when we say this here,\'a0it actually means the current object,\'a0which will have the ability to use this set state method.\
So let's save that.\'a0And let's try deleting one of these.\'a0So now you can see that it works.\'a0I really love lodash.\'a0Also, this shows you that you can import \cb9 libraries\'a0and not just use them in your templates,\'a0\cf5 \strokec5 but you can use them in your regular JavaScript methods.\
\
\pard\pardeftab720\sa180\partightenfactor0

\f1\b \cf5 14. Handling a toggle\
\
\pard\pardeftab720\sa180\partightenfactor0

\f0\b0 \cf2 \cb3 \strokec2 - [Instructor] Let's go ahead and make\'a0our headline here clickable\'a0\cb7 so that it displays or hides the form.\cb3 \'a0This is going to be pretty much a review\'a0of the things that we've done before,\'a0but I think it's worthwhile to go over them.\'a0So we'll go back into AddAppointments.js,\'a0and I want to start by adding an icon here.\'a0So just like we did with other icons,\'a0I'm just going to import the one that I need.\'a0This one is called FaPlus,\'a0and it's coming from the react-icons\'a0component that is in the node_modules folder,\'a0and it's part of the Font Awesome family,\'a0so it gets encoded like this.\
So now that we have it there, we need to use it,\'a0and that's super easy.\'a0All we need to do is, right before Add Appointment,\'a0we'll just use an FaPlus\'a0tag here, which will call that component\'a0and give us a nice-looking plus sign here.\'a0So this will show or hide the form.\'a0And now it's time to add an event\'a0that tracks the clicking on this header right here.\
So this is going to go right here,\'a0and I tend to put all of my\'a0sort of application-specific code at the end of the tags.\'a0Here, we'll say onClick, then again use an expression,\'a0and then go ahead and look for, in the props,\'a0something that we'll create called toggleForm.\'a0And we'll go ahead and save this.\'a0This doesn't exist quite yet.\'a0I tend to call things that I'm going to do\'a0on my local components handle something.\
So if I were to take care of this in this local component,\'a0I would create a method called handle form,\'a0and then that would do something,\'a0possibly pass it to the main component.\'a0And I usually call it,\'a0in the main component, whatever I actually do.\'a0So you'll see that when I create local ones,\'a0they're always like handle something,\'a0and then the main ones have the actual reference\'a0that makes more sense.\'a0All right, so this is looking for something in App.js\'a0in the component.\'a0So in addition to this display of form here,\'a0then we need to pass this prop,\'a0and this is going to be called toggleForm\'a0because that's what I called it in the sub-component.\
And now this will execute\'a0something locally called toggleForm.\'a0All right, so now I need to write that function.\'a0Guess I'll do it right here.\'a0This will say toggleForm.\'a0It's going to be, it's just setting the state.\'a0Because all we have to do to make that thing display\'a0or not display is to modify\'a0this variable right here that's in state.\'a0So we're going to set to state,\'a0and we'll just set formDisplay\'a0to the opposite of whatever\'a0formDisplay currently is.\
That should almost do it,\'a0but there's a little bit of sort of an issue.\'a0Something that we always have to deal with is\'a0the meaning of the word this when I'm using state\'a0inside one of these sub-methods here.\'a0Whenever I do that, I need to make sure that I bind\'a0the proper value of the sort of classes,\'a0this statement, instead of the internal form version of it.\'a0So the meaning of this in the toggleForm method\'a0that I'm creating is the same thing as the meaning of this\'a0in the class that it is contained in.\
\pard\pardeftab720\sa180\partightenfactor0
\cf5 \cb8 \strokec5 Right, let's save that, and\cf2 \cb3 \strokec2 \'a0now you can see that I can toggle the form on and off\'a0by clicking on this right here.\
\
\pard\pardeftab720\sa180\partightenfactor0

\f1\b \cf2 15. Monitor Form State\
\

\f0\b0 - [Instructor] It's time to starting working\'a0on how we process information in a form.\'a0To do that we need to learn how to manage the input fields\'a0that are in this form, and so what we'll need to do\'a0is create some variables in our AddAppointments.js to keep\'a0\cb7 track of these different input fields as they are modified.\cb3 \'a0We'll start by adding a constructor section here.\'a0And in here we're going to create a state.\'a0Now part of the reason we're doing this is because\'a0when we store the date, we're actually going to store\'a0a combination of both the date and the time together,\'a0but I've kept these fields in different places in the from\'a0because they're a little bit easier to fill out this way.\
When the data gets saved; however, if we take a look\'a0at the data.jason file, you'll see that everything\'a0gets stored together, so I'm going to need\'a0to combine the date and also the time.\'a0So let's go back here, we'll create variables for each\'a0of these in our local state, pet name, et cetera, et cetera.\'a0Now that we have those local variables, let's go into\'a0each one of the fields, and we'll make this bigger.\'a0And we'll create references to the values of the\'a0local state variables, as well as an event that will\'a0trigger whenever somebody changes any of the input fields.\
So right in the input field for the pet name,\'a0I'm going to create a value attribute, and this will also\'a0reference our local state, and then in addition to that\'a0for each one of these fields, we're going to trigger\'a0an event whenever any of them change.\'a0So we'll use the onChange event handler, and we'll\'a0create a method here called handleChange.\'a0We haven't made this one yet, so whenever any of these\'a0fields change, this event will be called, we can create\'a0one for all of them, so let's do that on\'a0every one of the different input fields,\'a0obviously changing the different variables.\
Now we need to create this handle\'a0change method, so we'll do that over here.\'a0Whenever an event takes place, we can receive that event\'a0in a variable in any of these methods, so\'a0that will create some variables to manage what is happening\'a0when somebody types in something in any\'a0of the fields that we're monitoring.\'a0So we'll say const here, and create a value equal target,\'a0we'll set that to the target of the current event.\
So this would be pointing to the input field\'a0that somebody is modifying at any point in time.\'a0We'll create another variable for keeping track of the\'a0value that somebody has changed in the input field.\'a0And finally, we'll create another one to keep track\'a0of the name of the input field.\'a0So, this is important too, every one of these different\'a0input fields has a name attribute, and that's what\'a0we're actually referring to here.\
At least, that's what we actually want to get a hold of\'a0so that we are modifying the right item.\'a0Then what we can do here is set the state of the current\'a0component, and we can use the name of the element,\'a0so this would be like the pet name, owner name,\'a0the name of the input name in other words, and set that\'a0to the value that we receive in the handle change method.\'a0And it looks like I need a parenthesis here around this\'a0entire thing, so let's do that.\
So there's a couple of other things I need to do\'a0since I created this method right here,\'a0and I'm using the this keyword.\'a0I need to make sure that in the constructor I also bind\'a0the keyword this properly, so I'm going to tell the method\'a0called handleChange to have a proper understanding\'a0by binding the keyword this of the parent class.\
So the keyword this is going to mean the class\'a0and therefore handleChange is now going to have\'a0access to be able to modify the state here.\'a0So, in addition to that I need to make sure that I call\'a0this super method whenever I use a constructor.\'a0Let's go ahead and save that and take a look at our form.\'a0And, actually let's make this form a lot bigger\'a0so that we can see more things on screen.\'a0And what I want to show you that we have now is,\'a0if you inspect this component, with the Chrome React\'a0extension, I want you to go ahead and click on\'a0add appointments to take a look at that component.\
So you can see that in state we have all the variables\'a0that we created, and if we modify one of these right here,\'a0you can see that as we're typing in the value here,\'a0the variable is actually syncing with the state that\'a0we have generated ourselves here.\'a0So let's go ahead and type all these in so you can see that\'a0they all get modified as we're entering them in here.\
\pard\pardeftab720\sa180\partightenfactor0
\cf5 \cb8 \strokec5 And that's great, 'cause that's exactly what we need\cf2 \cb3 \strokec2 \'a0in order to be able to process the rest of this form\'a0which we'll do in the next video.\
\
\pard\pardeftab720\sa180\partightenfactor0

\f1\b \cf2 16. Processing the form\
\pard\pardeftab720\partightenfactor0

\f0\b0 \cf2 \
\pard\pardeftab720\sa180\partightenfactor0
\cf2 - Let's finish up the AddAppointment component\'a0by allowing us to submit this form right here.\'a0So, I'm going to scroll down to the form tag,\'a0right here on this component,\'a0and I'm going to add an onSubmit event\'a0and this is going to call a method called handleAdd.\'a0So, we'll need to create that in this component.\'a0We'll go ahead and do that right here.\'a0This will be HandleAdd, it'll receive\'a0the event information from the submission.\
And the first thing I need to do\'a0is prevent the default behavior from happening here.\'a0This will prevent the form from submitting\'a0and reloading the page 'cause that's\'a0what will normally happen when somebody submits a form.\'a0We don't want a page reload, so we'll do that,\'a0\cb7 and I'm going to create a temporary variable here.\cb3 \'a0Again, I can modify the state directly,\'a0so this is just going to say, petName\'a0and reference the current value of the element in the form.\
So, this.state.petName has the information for the form,\'a0and then each of the other fields will follow.\'a0Now, when it comes to the date,\'a0I'm going to combine the date and the time together.\'a0Just separated by a space.\
Once we have this variable, then we will go ahead\'a0and pass it through a prop\'a0that we're going to create called addAppointment.\'a0We'll pass this temporary appointment,\'a0and then we'll clear out the form,\'a0so we'll just say, setState,\'a0pass along an object, and I'm actually going to just copy\'a0that from up here, 'cause it's going to be the same\'a0as the initialization of the form elements.\'a0And then finally, when we're done with this,\'a0then we're going to go ahead\'a0and issue the toggleForm method, so that will hide the form,\'a0or it will collapse the inside of this form\'a0so we can see the rest of the list\'a0that will have this new appointment.\
Course if we do this, we need to go ahead\'a0and make a change to the meaning of the variable, this,\'a0inside this component, so we'll say, handleAdd here,\'a0and bind the, this, keyword properly.\'a0So this is now ready, let's go ahead and save it,\'a0and it means that we have to go now\'a0into the app, that .js file.\
We'll start from the addAppointment component here.\'a0So this will execute the local addAppointment method\'a0that we'll create in just a minute,\'a0so this is the prop right here and it's going to receive\'a0from the internal component whatever we pass to this,\'a0which means that then we have to create this in here.\'a0It's going to receive an appointment and, again,\'a0we'll create a temporary appointment variable,\'a0it'll receive the current value of myAppointments,\'a0and I need to add to the appointment\'a0that I am creating an appointment ID,\'a0and it's going to reference the lastIndex variable\'a0that I've been keeping track of.\
So, the form doesn't have an appointment ID field,\'a0so I need to feed it, and I'm using this lastIndex\'a0that I use when I loop through the data\'a0that I receive from the file\'a0and created an index for each of the items.\'a0So once I have that, all I need to do\'a0is just push the element into the array.\'a0I'll use the unshift method from JavaScript,\'a0pass along the appointment, that'll put the appointment\'a0at the beginning of the array,\'a0and then I can setState with this new version of the array.\
I also need to go ahead\'a0and modify the lastIndex\'a0so that it increments,\'a0so that the next time we insert something,\'a0this will be ready.\'a0And finally, so I need to make sure\'a0that I modified the value of the keyword, this,\'a0inside addApointment,\'a0and then I'll save it.\
So, let's go ahead and try to add an appointment.\'a0We'll open this up, type in some information here.\'a0And we'll hit Add Appointment,\'a0and you can see the appointment is right here,\'a0also the form collapsed and if you open this up,\'a0you'll notice that it is a clear form.\'a0All that was handled through the addAppointment component\'a0and everything we just did is really just a review,\'a0but it's pretty much what you do all the time\'a0when you're working with react components.\
\

\f1\b 17. Preparing our search Component \
\

\f0\b0 - [Instructor] Let's start working on our last component,\'a0which is going to sort, as well as allow you to\'a0search through the different appointments.\'a0We'll get started by going to this gist.\'a0I'm going to click on the Raw button right here\'a0and select this bootstrap code,\'a0then bring it back into my application,\'a0and I'll open up SearchAppointments.js,\'a0and I need to replace this code right here.\'a0Once again, putting everything inside parentheses\'a0because I have a multi-line template.\'a0And then I'm going to paste that\'a0and I've already changed the classes to classNames\'a0and everything else is just standard bootstrap code\'a0so you can see we have a form here where we can\'a0type in some text that we want to filter\'a0all this stuff through, and we can also,\'a0or we should be also able to modify how we sort\'a0through this element.\
So let's go ahead and start working on\'a0just sorting a list.\'a0And this is going to be pretty cool\'a0and I think show you the power of React.\'a0And what we'll need to do is create some additional\'a0state variables to keep track of how we want our\'a0sorting to work.\'a0So we'll say a couple of variables here orderBy\'a0and then I'll set it to petName to begin with.\'a0And then I'm going to use another variable here\'a0called orderDir, for direction.\
And I'll set that to ascending, or asc for right now.\'a0Now, when I am actually displaying the component,\'a0I can do something to the data and we would do that\'a0in between this render statement and the return statement\'a0because the return is designed to display the template.\'a0So we can sort of do something in between when we start\'a0to render and when we actually display the template.\'a0So we'll put the code right here,\'a0and what we'll do is we'll create variable called order.\
This is going to be just a temporary variable that we're\'a0going to use to decide how we're going to order the data.\'a0You'll see in a minute how it works.\'a0And then we'll create, again, a temporary variable\'a0called filteredApts and just set it to the current\'a0appointments that we have in our state.\'a0And then, what we'll do is, depending on the value\'a0of the order direction,\'a0we will modify our order variable.\
So we'll say, if this state ordered there is ascending,\'a0so if it's an ascending order then we will set the order\'a0variable to one.\'a0Otherwise set it to minus one.\'a0And this will become a multiplier that will allow me\'a0to sort the element in ascending order,\'a0or descending order.\'a0So you'll see me using this in a minute.\'a0Right, so then,\'a0I'm going to use the javascript sort method\'a0on filteredApts.\
And this works pretty easily just by comparing\'a0two items.\'a0So it's going to go through all of the elements\'a0in my array\'a0and rearrange them depending on the value\'a0of the element.\'a0So I'll say if, I'll take the first element\'a0and I'll say this.state.orderBy\'a0So I'm going to look in each element for\'a0a specific field. Remember that the data\'a0each one of these elements has these different fields.\
So I want to be able to sort by different\'a0fields right here.\'a0So I will take one of the fields,\'a0say like the petName, if I'm ordering by the pet name,\'a0and compare the two records.\'a0The first record and the second record\'a0and see which one is bigger than the other one\'a0and then sort them accordingly.\'a0So, we'll say if a and then the orderBy variable\'a0right now. We'll convert it to lower case,\'a0and this is just a regular javascript function.\
And the reason we're converting to lower case\'a0is because we want to make sure that\'a0if somebody types in an upper case character\'a0in the search, or if we're comparing two different\'a0say pay pays, and one of them happens to be\'a0upper case and the other one lower case,\'a0we don't really care about that.\'a0So, that's why we convert everything to lowercase\'a0when we're comparing.\'a0And so we'll say compare it to b\'a0Same thing over here at this state.\'a0That orderBy, also to lowercase.\
And then,\'a0So, normally you would return minus one if you\'a0wanted this to sort accordingly,\'a0but in here we're going to also have an\'a0additional multiplier, which will be our\'a0order variable that will allow me to reverse the sort.\'a0So, normally what you say is\'a0if these two compares, then return minus 1, and otherwise\'a0return one.\'a0But we actually are going to add this additional\'a0order variable here, so that we can\'a0with a simple setting of ascending or descending,\'a0reorder the sort accordingly.\
So, okay, let's finish this up.\'a0Right so,\'a0We have now filtered our appointments\'a0and what we're going to do is instead of\'a0\cb7 passing the actual appointments to\cb3 \'a0the list of appointments, we're going to\'a0pass this variable that we just created\'a0that contains the list of sorted appointments\'a0by our orderBy field, and in the order\'a0that is contained in our order dir state variable.\
So, we'll say filtered appointments here\'a0and I'll take a look at the appointments\'a0and now they are ordered by pet name\'a0in ascending order, and if we want to change them,\'a0we can go ahead and show them by ownerName\'a0ascending,\'a0and you can see that now that first owner is Audry.\'a0Or we can leave petName and set this to anything\'a0other than ascending,\'a0and now Zera is the first pet that appears here.\
So, supercool.\'a0The interesting thing here is that all we did\'a0was pass a different value to our list of appointments.\'a0And appointments is actually using a variable\'a0called appointments.\'a0And it doesn't care that we're feeding it something else,\'a0it's just going to display the list based on\'a0what we feed it\'a0and we just modify what that was to our\'a0\cf5 \cb9 \strokec5 filter appointments.\
\
\pard\pardeftab720\sa180\partightenfactor0

\f1\b \cf5 18.Managing Dropdown Display\
\
\pard\pardeftab720\sa180\partightenfactor0

\f0\b0 \cf2 \cb3 \strokec2 - [Instructor] So let's go ahead and display\'a0our current ascending or descending order\'a0and order by in this drop down right here.\'a0Now to do that you'll need to add an active class\'a0to any element that has the correct value.\'a0So we're going to start the other way here from app.js\'a0and search appointments.\'a0We need to go ahead and add the order by prop.\'a0And so this will be matching whatever the state\'a0of the current application is will be for order by.\
And then we'll do the order direction in the same way.\'a0So this'll pass along these two variables\'a0into our subcomponent in search appointment.js.\'a0We will need to capture that and modify the classes\'a0dynamically based on those values.\'a0So we're going to start obviously right here on this pet name.\'a0And what I'm going to end up doing\'a0let's go ahead and make this bigger\'a0is just modifying that how this class name works\'a0so that it uses an expression.\
And I like to do single quotes\'a0when I'm doing Javascript or Javascript-y stuff.\'a0So I'll say sort by drop down item plus\'a0and I want to make sure I add a space here.\'a0And then I will say this props order by.\'a0So I'm going to use that order by variable.\'a0So if that variable is equal to pet name in this\cb9  case.\'a0Then I'm going to add a class of active.\
\cb3 Otherwise I'll just not add anything.\'a0And so we'll need to do this for all of them.\'a0I can copy this one, I just have to be really careful\'a0that I don't screw up the variable names here.\'a0So I'm going to copy this class name here\'a0and I'll paste it instead of this one.\'a0And let me go ahead and do that for all of them.\'a0I'm just going to have to be careful when replacing everything.\'a0So the first one is pet name, second one\'a0I know that the name of this field is appointment date.\
This one is going to be owner name.\'a0And then on these I'm actually looking for\'a0the order direction variable.\'a0And this will be ascending.\'a0And this one is descending.\'a0So I'll save that.\'a0And take a look at our little drop down.\'a0So now they are matching whatever the value\'a0in the app.js file, whatever the value of state is\'a0my drop down should match it.\
Let's go ahead and modify these owner name.\'a0So now it says owner here.\'a0And let's try appointment date.\'a0And these should also be sorting properly as well.\'a0So there's the date.\'a0And let's change this to descending.\'a0And you can see my drop downs are all working properly.\'a0So let's just reset this back to pet name\'a0and ascending just to keep it as the default.\
And that's all there is to it.\'a0You just have to use the conditional classes\'a0with expressions how we've been doing before\'a0but just make them match the value in our app.js.\'a0It's pretty cool now we can modify anything\'a0in our main component and when something in our state\'a0gets modified it will automatically redraw the list\'a0in the correct order.\'a0And our search component will display the \cb9 proper value\'a0at least for right now in the drop down.\
\pard\pardeftab720\sa180\partightenfactor0
\cf5 \strokec5 That's pretty awesome.\
\

\f1\b 19. Sorting Existing records
\f0\b0 \
\
\pard\pardeftab720\sa180\partightenfactor0
\cf2 \cb3 \strokec2 - [Instructor] So let's see if we can make\'a0these drop down items control how things are sorted.\'a0So to do that we'll go the other way around,\'a0we'll start with search appointments\'a0and let's make this bigger so we can see more things.\'a0What I want to do is go to the top of this\'a0and I'm going to add an event handler here.\'a0So this will be onClick when somebody clicks\'a0on one of these items, then what I'll do\'a0is execute an expression, that expression is going\'a0to trigger an event and so when that event happens.\
What we'll do is we will use the props to execute\'a0a function in the app.js file called changeOrder.\'a0We'll have to make that one,\'a0and we'll pass it along two things.\'a0In this case what we're going to order by\'a0so in this first one it's going to be actually\'a0looks like I'm on date so this will actually be\'a0aptDate here and then we can pass along how we want\'a0it to sort so I'll just use the props\'a0that we're already getting for the orderedDir here\'a0and that should work.\
So I need to do that everywhere,\'a0modifying each one of them for the value I need to pass.\'a0So this one over here is petName, then aptDate,\'a0and this one's going to be ownerName,\'a0and then down here we'll do something pretty similar\'a0so I'm just going to paste that same one\'a0and instead of passing of course the order by,\'a0we'll use the props once again.\
We're already getting those props\'a0and look for orderBy here and then pass along\'a0either ascending, or in the case of descending here.\'a0Oops I'm sorry that should be,\'a0I'm sort of breaking my rule a little bit here\'a0but I think it's okay of putting my React code\'a0after the last html attribute.\'a0I feel like className should sort of stay where it is,\'a0and I'm just keeping them together.\
So that's all we need, this is pretty cool because,\'a0since we're not really doing anything before\'a0we execute the parent method.\'a0So we don't really need to do anything\'a0in the local React component.\'a0We're just letting props manage everything.\'a0So save that, when we'll go into app.js.\'a0\cb7 We'll start out by looking in SearchAppointments\cb3 \'a0and we will create the prop, so this will be\'a0changeOrder and this is going to execute a local method\'a0that we'll create called this.changeOrder,\'a0and so now we have to make that.\
This will be the easiest function we've created so far.\'a0We'll do it right here, this is going to be called changeOrder\'a0it's going to receive two things the order\'a0and the direction, that we pass\'a0from the SearchAppointments.js component\'a0and then in here we will just set the state\'a0to whatever those values are that we get\'a0from the sub-component, so orderBy.\
That's going to be set order\'a0and then orderDir it's going to be set to the direction.\'a0So that is all we need to do for this method\'a0and we need to do of course this piece right here,\'a0so I'll copy that one and I'll modify this\'a0to say changeOrder, and that should do it.\'a0Let's try it out if we did everything correctly\'a0we should be able to use this dropdown now\'a0and let's do descending order, ascending,\'a0by date and by owner.\
Now the beautiful thing about React is it allows you\'a0to compartmentalize your functionality\'a0the ListAppointments component is only worrying\'a0about displaying a list.\'a0Whatever data you pass to it it's going to display\'a0a list with that data, if you sort the data\'a0before you pass it to it it'll just display\'a0a sorted piece of data.\'a0If you filter the data it'll filter it,\'a0and all you need to do in this main component\'a0is sort of control what's happening with state.\
What's the current value of orderBy,\'a0what's the current value of orderDir,\'a0and you can see that it lets us write\'a0\cf5 \cb8 \strokec5 a lot less code than we would have to\cf2 \cb3 \strokec2 \'a0if we were writing and managing events.\
\
20. Building up Search\
\
- [Instructor] Next, we'll work on building\'a0the search functionality for our application.\'a0We won't quite code the search box right here,\'a0but we'll cause the list to be automatically searched\'a0by some query text.\'a0So we'll start off by creating an additional parameter here\'a0in our state, we'll call it queryText.\'a0We'll set that to begin with to nothing.\'a0And then, what we need to do is look in our component,\'a0where we are filtering the appointments.\
We're also going to search the appointments\'a0using the JavaScript filter function.\'a0Now, it looks like this, filter,\'a0and then you can use some arrow function magic here,\'a0which I'll explain in just a minute.\'a0But I just want you to know that\'a0this is a higher-order function,\'a0which means that it doesn't allow you to modify\'a0a array directly, like sort is doing here.\'a0So I need to say filteredApts\'a0is equal to filteredApts.sort,\'a0and then we filter right here.\
So with filter, you sort of create a temporary variable\'a0that represents each item as it is being filtered,\'a0so we'll call that eachItem.\'a0And then I'm going to use an arrow function here,\'a0and we'll use the return statement,\'a0and we'll take each of the different parameters\'a0that we want to search by,\'a0and we'll compare what we are searching for,\'a0\cb7 with the value of that element in our data,\cb3 \'a0so it looks like this.\
We'll look for each item,\'a0and then we want to search this just by petName.\'a0Because this is a text search,\'a0we want to look for things that people type in.\'a0Pet name, the owner name, or what's wrong with the pet.\'a0So we'll say eachItem, petName,\'a0convert that to lower case,\'a0just to prevent any capitalization differences,\'a0and then we will use this method called includes\'a0to test to see\'a0if it matches what's in our query string.\
Again, toLowerCase,\'a0and let's go ahead and make this bigger.\'a0We'll scroll it up a little bit.\'a0And we need to make sure that we compare it for each\'a0of the items that we want to test for,\'a0so we'll say we'll use the or statement,\'a0and go ahead and copy this section twice here,\'a0and we want to search by ownerName,\'a0and aptNotes only.\
We don't need this last or statement here.\'a0And let's go ahead and save that, take a look at our app.\'a0Doesn't look like we've made any glaring mistakes.\'a0Now, it's not filtering yet,\'a0but if we type in or modify our query text,\'a0let's put in ba, let's type in actually one of the names,\'a0bailey here, and save this.\'a0You'll see that only that record shows up.\'a0So let's try another one like Chip,\'a0I know that's another pet,\'a0and let's just try something that would match\'a0more than one thing, like ba.\
So that matches a bunch of different things,\'a0and that's all there is to a search.\'a0You're just using a series of JavaScript methods here,\'a0including the filter combine with the sort,\'a0and also a test to see if the item,\'a0with the record that we're checking for,\'a0matches something in our query string.\'a0So it's actually pretty easy to do a search.\'a0The cool thing again is, even when we sort things,\'a0since we're searching and filtering at the same time,\'a0we can actually test to see that\'a0even if we change the sorting algorithm,\'a0our query is still managing what displays here,\'a0and we can look at the sort of sorted list\'a0by our parameters.\
And everything is doing its own job.\'a0The dropdown here is modifying state,\'a0the list doesn't care, it just displays whatever you feed it\'a0even if it's a filtered, sorted list,\'a0and if we were to add an appointment,\'a0it would just add an appointment in here as well.\
\

\f1\b 21. Activating Inputs
\f0\b0 \
\
- [Instructor] We already have searching\'a0working in our application,\'a0but we need to update the application\'a0so that this input field controls that search parameter.\'a0So in app.js, I'll start by getting rid\'a0of this default query text\'a0that I did in the previous video\'a0so that I can have a full list to start up with.\'a0So let's go back then into SearchAppointments.\'a0We'll work our way backwards from SearchAppointments\'a0back into app in the same way that we've been doing.\'a0So we're looking for this input field,\'a0and we're going to look for an onChange event.\
Whenever somebody modifies this input field,\'a0then we're going to execute here an expression,\'a0pass along an event,\'a0and we don't need to do anything to this input field\'a0in the local component.\'a0We're just going to use the props\'a0to go ahead and pass this along\'a0to a method that we're going to call search appointments,\'a0and that search appointments will receive\'a0the value of the input field.\
So that will be an e.target.value.\'a0And then once we have that,\'a0that's really all we need to do in here.\'a0Let's go back into app.js,\'a0and we'll need to make sure we add that to the component.\'a0So SearchAppointments\'a0is going to be equal to a local function,\'a0call also search appointments.\
Although you could obviously call this whatever you want.\'a0Remember, to the right of the equals sign\'a0will be the local thing, and to the left\'a0will be the thing that comes from the component,\'a0or the sub-component in this case.\'a0So once we have that, we clearly need to define that.\'a0And we'll do that right here.\'a0It really doesn't matter where you do it.\'a0So we'll create this method called search appointments.\'a0It's going to receive some sort of text\'a0that will have a query, and then all we have to do here\'a0is modify state\'a0to use this value.\
We're storing the current query in queryText,\'a0and we'll pass along what we send\'a0from the input field as it gets changed.\'a0All right, almost done.\'a0Don't forget that you have to do\'a0the rebinding of this always\'a0so that everything works well.\'a0Let's save that, and now,\'a0our application searches dynamically, which is amazing.\
I don't know if this really impresses you,\'a0but the fact that react uses this virtual dom\'a0makes it super awesome because you never worry about\'a0dealing with events directly\'a0\cb7 or dealing with the dom directly.\cb3 \'a0All you do is create these little components\'a0and then create these methods that modify state,\'a0and everything works as it should\'a0and you don't have to worry about all of the mess\'a0that you would normally have to do\'a0\cf5 \cb8 \strokec5 with regular JavaScript or jQuery or something like that.\cf2 \cb3 \strokec2 \
\
22. Modifying records\
\
- [Instructor] To finish out this application,\'a0we're going to program how we can modify a record.\'a0And the ones that I'm going to modify\'a0are going to be pretty simple.\'a0I'm just going to let you modify the name of the pet,\'a0the owner, and also anything in the description\'a0to keep things simple.\'a0If we were going to modify something like the date\'a0we would need like a popup link or something like that.\'a0To take care of these we can use a feature in HTML\'a0called contentEditable.\'a0It allows any field to be editable.\
But we'll need to manage how that works within React,\'a0because it isn't something that React is used to doing.\'a0It involves directly having access to the dom,\'a0which is usually something that React manages for you.\'a0So we'll start by going to ListAppointments.\'a0And we'll add a contentEditable to those different fields.\'a0So here where I have the pet-name\'a0I'm going to just add contentEditable.\
And notice that it's spelled a little bit differently\'a0than what you would normally do in HTML.\'a0And as soon as I do that,\'a0let's just go ahead and save this,\'a0and I'm going to show you that the application\'a0is going to show up some warnings,\'a0actually it's going to throw up a bunch of errors.\'a0And that's because it really warns you that\'a0this has children and it's being managed by React,\'a0so you have to make sure that nothing\'a0is unexpectedly modified or duplicated.\'a0It's probably not intentional.\'a0It actually is intentional.\
And I want to show you that sometimes you really do\'a0need to change the way things are working.\'a0To override this error we're going to\'a0have to add an additional attribute here.\'a0It's called suppressContentEditableWarning,\'a0not surprisingly.\'a0And whenever you're doing something that react doesn't like\'a0there are a lot of other versions of these kind of things\'a0that you can include so that it won't complain.\'a0So let's see, let's save that and if I inspect this\'a0it should show you that we have no more errors,\'a0which is great, that's what we want.\
But we need to add a few more things in here.\'a0So in this span I need to detect\'a0when somebody modifies this field,\'a0which is detectable through an event called blur.\'a0So onBlur, and then it's going to be sort of like\'a0what we've done before.\'a0We're going to get an event as a result of this change\'a0and so we will use the props and pass along\'a0what we have here to a method called updateInfo\'a0that we'll be creating in the main app.\
Then we will pass along the thing that we want to change.\'a0In this case it's going to be the petName.\'a0Then we're also going to pass along\'a0the text that we want to change,\'a0which will be available\'a0in the target attribute of the event.\'a0And we will look for an attribute called innerText.\'a0And then finally we need to pass along the appointment ID\'a0of the current element.\'a0So I'll do item appointment ID,\'a0because that's what we're going to use\'a0to find the proper record.\
So I'm going to copy all of these\'a0and do the same thing for the other fields\'a0that I want to modify.\'a0Just going to go into span in here.\'a0So I'm just going to paste and I have\'a0a little utility called prettier\'a0that formats things when I save.\'a0So it's actually a really nice thing to have\'a0because it makes every piece of code\'a0that you create consistent.\'a0So we'll also add this right here in appointment notes,\'a0and we'll save it.\
And of course we'll need to modify the names of the fields.\'a0So this one is ownerName.\'a0And this one is aptNotes.\'a0All right, so now that we have the events\'a0and they're triggering something called updateInfo,\'a0we'll need to go to App.js and start programming that.\'a0We'll start off in the list of appointments.\'a0We'll reference that updateInfo method here.\
And we'll pass that along to a local version of that event.\'a0Right, so that means that we have to create that event.\'a0Let's go ahead and put it right here.\'a0We'll call the updateInfo.\'a0It's going to get a name, value, and an ID.\'a0And again, we'll have to make a copy of the appointments.\'a0So we'll put it in this variable.\
We'll pass along the value of the array\'a0of the current appointments.\'a0And then we will initialize another variable\'a0called the index.\'a0The appointment index.\'a0And here I'm going to use another fantastic Lodash method.\'a0The job of this is going to locate the index\'a0of some element in the array.\'a0So the way that my application works,\'a0when they data gets loaded,\'a0from this data that JSON file,\'a0I push a individual ID,\'a0but because I'm sorting and searching through an element,\'a0the actual current index of the list that is showing\'a0might be different than the ID that I assign to that record.\
So what I need to do is actually find the current\'a0and actual ID, not of the sorted list,\'a0but of the original list.\'a0So hopefully that makes sense.\'a0And so what I'm going to do is use a method\'a0from the handy dandy Lodash,\'a0which is a fantastic library, by the way.\'a0This ones called findIndex.\'a0And so what I'll do is I'll pass along the appointments.\
And then I need to pass along something in the object.\'a0So remember, I'm looking through this data,\'a0and this data is an array of objects.\'a0So I need to pass it along a unique identifier\'a0that is only going to be in that element,\'a0and it will return the specific record that I'm looking for.\'a0Now remember, I can't guarantee that I'm\'a0not going to have two pets with the same name,\'a0two of the same owners, even the appointment notes\'a0and the dates can't be guaranteed\'a0'cause I might be accepting more than one pet.\
But one of the reasons I passed along that unique index\'a0is so that I have a unique identifier\'a0for each pet and that's what I'm going to be testing\'a0in this findIndex method.\'a0So we'll say aptId, that's going to be the ID.\'a0So this is the ID that we get passed\'a0when we edit the record.\'a0And now this is going to return the actual ID\'a0in the current state\'a0so that I can modify it in my data.\
So now what I need to do is actually modify that record.\'a0So I'm going to say temp appointments\'a0using that appointment index and then passing along\'a0the name of the field that I want to edit.\'a0So when I edit something here I am passing along\'a0the name of the thing that I'm editing.\'a0If I am in the pet name part of the record\'a0then I'll pass pet name along.\'a0If I'm in the owner name,\'a0if I'm in some other place, it's going to pass along\'a0the name of the field that I'm trying to edit\'a0as I blur or exit one of those contentEditable fields.\
So that's what this name is.\'a0And then I'll pass along the new value.\'a0Then I will just use setState to modify the appointments\'a0so that they contain the new version\'a0of my appointment that I stored in temp appointment.\'a0All right, and again.\'a0I shouldn't have saved that.\'a0But essentially remember, that I always have to do this,\'a0and it's really easy to forget.\
Also findIndex.\'a0I haven't imported the findIndex method yet from Lodash.\'a0So I need to make sure I do that.\'a0FindIndex and without,\'a0\cb7 that's why sometimes I don't look at this preview\cb3 \'a0because sometimes it doesn't keep up\'a0with what I'm doing either.\'a0So let's see, this new one is called\'a0updateInfo.\'a0Find this.\
And now let's try to modify this one,\'a0let's call him Zed.\'a0There's that when I modify his name\'a0it actually takes me, it resorts the list\'a0and it takes me, actually, to that spot,\'a0which is really cool.\'a0It means that this version of the list\'a0that I'm seeing right now is the already sorted list.\'a0It noticed that I made a change by modifying the state.\'a0\cf5 \cb8 \strokec5 It changed the state and it's now showing me the new list.\cf2 \cb3 \strokec2 \'a0So this is working.\
\
\cb9 \
\cb3 \
\
\
\
\
\
\
\
\
\
\pard\pardeftab720\sa180\partightenfactor0

\f1\b \cf2 \outl0\strokewidth0 \

\f0\b0 \
\
}